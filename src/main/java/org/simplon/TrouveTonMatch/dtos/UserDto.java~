package org.simplon.TrouveTonMatch.dtos;

import lombok.Builder;
import lombok.Getter;
import lombok.Setter;
import org.simplon.TrouveTonMatch.model.*;

@Getter
@Setter
@Builder
public class UserDto {
    String username;
    UserRole role;
    Long id;
    Long plateformeId;
    String plateformeName;
    String email;
    Boolean enabled;
    Adresse adresse;

    String parcours;
    String expertise;
    String deplacements;
    String disponibilitesParrain;

    String disponibilitesPorteur;
    String projetName;


    public static UserDto fromEntity(Utilisateur user) {

//        Long plateformeId = null;
//        String plateformeName = null;
//
//        if (user instanceof Porteur) {
//            Porteur porteur = (Porteur) user;
//            plateformeId = porteur.getPlateforme() != null ? porteur.getPlateforme().getId() : null;
//        } else if (user instanceof Parrain) {
//            Parrain parrain = (Parrain) user;
//            plateformeId = parrain.getPlateforme() != null ? parrain.getPlateforme().getId() : null;
//        }
//
//        if (plateformeId != null) {
//            plateformeName = user instanceof Porteur ? ((Porteur) user).getPlateforme().getNom() : ((Parrain) user).getPlateforme().getNom();
//        }

        return UserDto.builder()
                .username(user.getUsername())
                .role(user.getRole())
                .id(user.getId())
                .email(user.getEmail())
                .plateformeId(user.getPlateforme() != null ? user.getPlateforme().getId() : null)
                .plateformeName(user.getPlateforme() != null ? user.getPlateforme().getNom() : null)
                .enabled(user.isEnabled())
                .adresse(user.getAdresse())
                // Champs spécifiques à Parrain
                .parcours(user instanceof Parrain ? ((Parrain) user).getParcours() : null)
                .expertise(user instanceof Parrain ? ((Parrain) user).getExpertise() : null)
                .deplacements(user instanceof Parrain ? ((Parrain) user).getDeplacements() : null)
                .disponibilitesParrain(user instanceof Parrain ? ((Parrain) user).getDisponibilites() : null)
                // Champs spécifiques à Porteur
                .disponibilitesPorteur(user instanceof Porteur ? ((Porteur) user).getDisponibilite() : null)
                .projetName(user instanceof Porteur && ((Porteur) user).getProjet() != null
                        ? ((Porteur) user).getProjet().getTitle() : null)
                .build();
    }
}